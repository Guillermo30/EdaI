package org.eda1.practica02.ejercicio01;

public class ProcesarDirecciones {
	
	import java.io.BufferedReader;
	import java.io.File;
	import java.io.FileNotFoundException;
	import java.io.FileOutputStream;
	import java.io.FileReader;
	import java.io.IOException;
	import java.io.ObjectOutputStream;
	import java.util.ArrayList;
	import org.eda1.estructurasdedatos.BSTree;
	import org.eda1.estructurasdedatos.Iterator;

	

	BSTree<DireccionMaquinas> treeDirecciones;

		
		
		//consturctores
		public ProcesarDirecciones(){
			this.treeDirecciones = null;
		}
		public ProcesarDirecciones(BSTree<DireccionMaquinas> treeDirecciones){
			this.BSTreeDirecciones = treeDireccionesMaquina;
		}
		
		

		//cargar archivo
		public BSTree<DireccionMaquinas> cargarArchivo(String archivo){
			BSTreeDirecciones.clear();
			try {
				leerAchivo(archivo);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			return  BSTreeDirecciones;
		}
		
		//leer achivo
		private static void leeArchivo(String stringArchivoEntrada)  throws FileNotFoundException {
			
			BufferedReader br = new BufferedReader(new FileReader (new File (stringArchivoEntrada)));
			String linea,ip,maquina;
			String[] par;
			DireccionMaquinas maquinaActual;
			
			try {
				// Leemos el fichero
				while((linea=br.readLine())!=null){
					par=linea.split(" ");	
					ip=par[0];maquina=par[1];
					// Comprobamos si el par ip / maquina existe. Si no existe lo creamos
					if((maquinaActual=compruebaPar(ip,maquina))==null){ // Lo añadimos
						if(!buscaIP(ip)){ //Si no existe esa ip la agregamos junto con su maquina
							DireccionMaquinas temp=new DireccionMaquinas(ip,maquina);
							BSTreeDirecciones.add(temp);
						}else  // Existe pero no tiene esa maquina. Añadirle la maquina
							addMaquina(ip,maquina);
					}else // Si existe, aumentamos su contador
						maquinaActual.aumentaContador(maquina);				
				}
				br.close();
			} catch (IOException e) {
				e.printStackTrace();
			}    	
		}


}
