<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="es">
<head>
<!-- Generated by javadoc (version 1.7.0) on Tue Jan 21 15:19:16 CET 2014 -->
<title>RoadNetwork</title>
<meta name="date" content="2014-01-21">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="RoadNetwork";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/RoadNetwork.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../../../org/eda1/practica04/RoadNetworkTestJUnit4.html" title="class in org.eda1.practica04"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?org/eda1/practica04/RoadNetwork.html" target="_top">Frames</a></li>
<li><a href="RoadNetwork.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">org.eda1.practica04</div>
<h2 title="Class RoadNetwork" class="title">Class RoadNetwork&lt;Vertex&gt;</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>org.eda1.practica04.RoadNetwork&lt;Vertex&gt;</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Iterable&lt;Vertex&gt;, <a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;Vertex&gt;</dd>
</dl>
<hr>
<br>
<pre>public class <span class="strong">RoadNetwork&lt;Vertex&gt;</span>
extends java.lang.Object
implements <a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;Vertex&gt;, java.lang.Iterable&lt;Vertex&gt;</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#RoadNetwork()">RoadNetwork</a></strong>()</code>
<div class="block">Initialized this Network object to be empty.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#RoadNetwork(boolean)">RoadNetwork</a></strong>(boolean&nbsp;uDOrD)</code>
<div class="block">Consturcor de la clase.</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#RoadNetwork(org.eda1.practica04.RoadNetwork)">RoadNetwork</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="class in org.eda1.practica04">RoadNetwork</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&nbsp;network)</code>
<div class="block">Initializes this Network object to a shallow copy of a specified Network
 object.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#adaptToFloydGraph()">adaptToFloydGraph</a></strong>()</code>
<div class="block">Transforma un grafo cualquiera en grafo de Floyd.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#addEdge(Vertex, Vertex, double)">addEdge</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
       <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2,
       double&nbsp;w)</code>
<div class="block">Ensures that an edge is in this Network object.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#addVertex(Vertex)">addVertex</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;vertex)</code>
<div class="block">Ensures that a specified Vertex object is an element of this Network
 object.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>org.eda1.practica04.RoadNetwork.BreadthFirstIterator</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#breadthFirstIterator(Vertex)">breadthFirstIterator</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v)</code>
<div class="block">Breadth first itreador.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#clear()">clear</a></strong>()</code>
<div class="block">Removes all of the vertices and edges from the graph.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#containsEdge(Vertex, Vertex)">containsEdge</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
            <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</code>
<div class="block">Determines if this Network object contains an edge specified by two
 vertices.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#containsVertex(Vertex)">containsVertex</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;vertex)</code>
<div class="block">Determines if this Network object contains a specified Vertex object.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>org.eda1.practica04.RoadNetwork.DepthFirstIterator</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#depthFirstIterator(Vertex)">depthFirstIterator</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v)</code>
<div class="block">Depth first iterator.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#Dijkstra(Vertex, Vertex)">Dijkstra</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;origen,
        <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destino)</code>
<div class="block">Algoritmo Dijkstra.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#DijkstraFarthest(Vertex)">DijkstraFarthest</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source)</code>
<div class="block">Dijkstra farthest.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#DijkstraTree(Vertex)">DijkstraTree</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source)</code>
<div class="block">Metodo Dijkstra con arbol.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#Floyd()">Floyd</a></strong>()</code>
<div class="block">Algoritmo Floyd</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#FloydClosestFarthest()">FloydClosestFarthest</a></strong>()</code>
<div class="block">Clase Floyd closest farthest.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#FloydFilterByDistances(double, double)">FloydFilterByDistances</a></strong>(double&nbsp;d1,
                      double&nbsp;d2)</code>
<div class="block">Clase Floyd filter by distances.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#FloydFilterByNameOfCity(Vertex)">FloydFilterByNameOfCity</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;origen)</code>
<div class="block">Floy filtardo con un nombre de ciudad.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#FloydWithDijkstra()">FloydWithDijkstra</a></strong>()</code>
<div class="block">Metodo</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#getDirected()">getDirected</a></strong>()</code>
<div class="block">Obtener si es dirigido</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.Set&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#getNeighbors(Vertex)">getNeighbors</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v)</code>
<div class="block">Returns the vertices that are adjacent to vertex v in a
 <tt>Set</tt> object.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#getWeight(Vertex, Vertex)">getWeight</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
         <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</code>
<div class="block">Determines the weight of an edge in this Network object.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#isAdjacent(Vertex, Vertex)">isAdjacent</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
          <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</code>
<div class="block">Checks if is adjacent.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#isEmpty()">isEmpty</a></strong>()</code>
<div class="block">Determines if this Network object contains no vertices.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#isFloydGraph()">isFloydGraph</a></strong>()</code>
<div class="block">Comprueba si es un grafo de Floid.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.Iterator&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#iterator()">iterator</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#largestPathWithSimplePaths(Vertex, Vertex)">largestPathWithSimplePaths</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source,
                          <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destination)</code>
<div class="block">Devuelve en camino con mayor longitud.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#numberOfEdges()">numberOfEdges</a></strong>()</code>
<div class="block">Returns the number of edges in this Network object.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#numberOfVertices()">numberOfVertices</a></strong>()</code>
<div class="block">Determines the number of vertices in this Network object.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#Prim(Vertex)">Prim</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source)</code>
<div class="block">Metodo Prim.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static <a href="../../../org/eda1/practica04/RoadNetwork.html" title="class in org.eda1.practica04">RoadNetwork</a>&lt;java.lang.String&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#readRoadNetwork(java.lang.String)">readRoadNetwork</a></strong>(java.lang.String&nbsp;filename)</code>
<div class="block">Read road network.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#removeEdge(Vertex, Vertex)">removeEdge</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
          <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</code>
<div class="block">Ensures that an edge specified by two vertices is absent from this
 Network object.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#removeVertex(Vertex)">removeVertex</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;vertex)</code>
<div class="block">Ensures that a specified Vertex object is not an element of this Network
 object.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#setDirected(boolean)">setDirected</a></strong>(boolean&nbsp;uDOrD)</code>
<div class="block">Cambia si es dirigido o no en grafo.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#setWeight(Vertex, Vertex, double)">setWeight</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
         <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2,
         double&nbsp;w)</code>
<div class="block">If edge (v1, v2) is in the graph, update the weight of
 the edge and return the previous weight; otherwise, return
 <tt>-1</tt>.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#shortestPathSTD(Vertex, Vertex, Vertex)">shortestPathSTD</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;origen,
               <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;pasando,
               <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destino)</code>
<div class="block">Metodo Shortest path std.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.util.ArrayList&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#simplePaths(Vertex, Vertex)">simplePaths</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source,
           <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destination)</code>
<div class="block">Simple paths.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#toArrayBFS(Vertex)">toArrayBFS</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;start)</code>
<div class="block">Pasa array el bfs.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#toArrayDFS(Vertex)">toArrayDFS</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;start)</code>
<div class="block">Pasa a arrays dfs.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#toArrayDFSAux(Vertex)">toArrayDFSAux</a></strong>(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;current)</code>
<div class="block">Pasa a array de String dfs aux.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#toString()">toString</a></strong>()</code>
<div class="block">Returns a String representation of this Network object.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.Set&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../org/eda1/practica04/RoadNetwork.html#vertexSet()">vertexSet</a></strong>()</code>
<div class="block">Returns a set view of the vertices in this graph.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="RoadNetwork()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>RoadNetwork</h4>
<pre>public&nbsp;RoadNetwork()</pre>
<div class="block">Initialized this Network object to be empty.</div>
</li>
</ul>
<a name="RoadNetwork(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>RoadNetwork</h4>
<pre>public&nbsp;RoadNetwork(boolean&nbsp;uDOrD)</pre>
<div class="block">Consturcor de la clase.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uDOrD</code> - boolean si es direccionado o no.</dd></dl>
</li>
</ul>
<a name="RoadNetwork(org.eda1.practica04.RoadNetwork)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>RoadNetwork</h4>
<pre>public&nbsp;RoadNetwork(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="class in org.eda1.practica04">RoadNetwork</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&nbsp;network)</pre>
<div class="block">Initializes this Network object to a shallow copy of a specified Network
 object. The averageTime(V, E) is O(V + E).</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>network</code> - - the Network object that this Network object is initialized to a shallow copy of.</dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="setDirected(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setDirected</h4>
<pre>public&nbsp;void&nbsp;setDirected(boolean&nbsp;uDOrD)</pre>
<div class="block">Cambia si es dirigido o no en grafo.</div>
</li>
</ul>
<a name="getDirected()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDirected</h4>
<pre>public&nbsp;boolean&nbsp;getDirected()</pre>
<div class="block">Obtener si es dirigido</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>the directed boolean.</dd></dl>
</li>
</ul>
<a name="isEmpty()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isEmpty</h4>
<pre>public&nbsp;boolean&nbsp;isEmpty()</pre>
<div class="block">Determines if this Network object contains no vertices.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#isEmpty()">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>true - if this Network object contains no vertices.</dd></dl>
</li>
</ul>
<a name="numberOfVertices()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>numberOfVertices</h4>
<pre>public&nbsp;int&nbsp;numberOfVertices()</pre>
<div class="block">Determines the number of vertices in this Network object.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#numberOfVertices()">numberOfVertices</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the number of vertices in this Network object.</dd></dl>
</li>
</ul>
<a name="numberOfEdges()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>numberOfEdges</h4>
<pre>public&nbsp;int&nbsp;numberOfEdges()</pre>
<div class="block">Returns the number of edges in this Network object. The averageTime (V,
 E) is O (V).</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#numberOfEdges()">numberOfEdges</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the number of edges in this Network object.</dd></dl>
</li>
</ul>
<a name="clear()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clear</h4>
<pre>public&nbsp;void&nbsp;clear()</pre>
<div class="block"><strong>Description copied from interface:&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html#clear()">Graph</a></code></strong></div>
<div class="block">Removes all of the vertices and edges from the graph.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#clear()">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
</dl>
</li>
</ul>
<a name="getWeight(java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="getWeight(Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getWeight</h4>
<pre>public&nbsp;double&nbsp;getWeight(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
               <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</pre>
<div class="block">Determines the weight of an edge in this Network object. The averageTime
 (V, E) is O (E / V).</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#getWeight(T, T)">getWeight</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - - the beginning Vertex object of the edge whose weight is
            sought.</dd><dd><code>v2</code> - - the ending Vertex object of the edge whose weight is sought.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the weight of edge <v1, v2>, if <v1, v2> forms an edge; return
         –1.0 if <v1, v2> does not form an edge in this Network object.</dd></dl>
</li>
</ul>
<a name="setWeight(java.lang.Object,java.lang.Object,double)">
<!--   -->
</a><a name="setWeight(Vertex, Vertex, double)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setWeight</h4>
<pre>public&nbsp;double&nbsp;setWeight(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
               <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2,
               double&nbsp;w)</pre>
<div class="block"><strong>Description copied from interface:&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html#setWeight(T, T, double)">Graph</a></code></strong></div>
<div class="block">If edge (v1, v2) is in the graph, update the weight of
 the edge and return the previous weight; otherwise, return
 <tt>-1</tt>.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#setWeight(T, T, double)">setWeight</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - source vertex of the edge.</dd><dd><code>v2</code> - destination vertex of the edge.</dd><dd><code>w</code> - weight assigned to the edge.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the original weight of the edge or <tt>-1</tt> if the edge does not exist.</dd></dl>
</li>
</ul>
<a name="isAdjacent(java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="isAdjacent(Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isAdjacent</h4>
<pre>public&nbsp;boolean&nbsp;isAdjacent(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
                 <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</pre>
<div class="block">Checks if is adjacent.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - the v1</dd><dd><code>v2</code> - the v2</dd>
<dt><span class="strong">Returns:</span></dt><dd>true, if is adjacent</dd></dl>
</li>
</ul>
<a name="containsVertex(java.lang.Object)">
<!--   -->
</a><a name="containsVertex(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>containsVertex</h4>
<pre>public&nbsp;boolean&nbsp;containsVertex(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;vertex)</pre>
<div class="block">Determines if this Network object contains a specified Vertex object.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#containsVertex(T)">containsVertex</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>vertex</code> - - the Vertex object whose presence is sought.</dd>
<dt><span class="strong">Returns:</span></dt><dd>true - if vertex is an element of this Network object.</dd></dl>
</li>
</ul>
<a name="containsEdge(java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="containsEdge(Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>containsEdge</h4>
<pre>public&nbsp;boolean&nbsp;containsEdge(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
                   <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</pre>
<div class="block">Determines if this Network object contains an edge specified by two
 vertices. The averageTime (V, E) is O (E / V).</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#containsEdge(T, T)">containsEdge</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - - the beginning Vertex object of the edge sought.</dd><dd><code>v2</code> - - the ending Vertex object of the edge sought.</dd>
<dt><span class="strong">Returns:</span></dt><dd>true - if this Network object contains the edge <v1, v2>.</dd></dl>
</li>
</ul>
<a name="addVertex(java.lang.Object)">
<!--   -->
</a><a name="addVertex(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addVertex</h4>
<pre>public&nbsp;boolean&nbsp;addVertex(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;vertex)</pre>
<div class="block">Ensures that a specified Vertex object is an element of this Network
 object.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#addVertex(T)">addVertex</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>vertex</code> - - the Vertex object whose presence is ensured.</dd>
<dt><span class="strong">Returns:</span></dt><dd>true - if vertex was added to this Network object by this call;
         returns false if vertex was already an element of this Network
         object when this call was made.</dd></dl>
</li>
</ul>
<a name="addEdge(java.lang.Object,java.lang.Object,double)">
<!--   -->
</a><a name="addEdge(Vertex, Vertex, double)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addEdge</h4>
<pre>public&nbsp;boolean&nbsp;addEdge(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
              <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2,
              double&nbsp;w)</pre>
<div class="block">Ensures that an edge is in this Network object.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#addEdge(T, T, double)">addEdge</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - - the beginning Vertex object of the edge whose presence is
 ensured.</dd><dd><code>v2</code> - - the ending Vertex object of the edge whose presence is
 ensured.</dd><dd><code>w</code> - the w</dd>
<dt><span class="strong">Returns:</span></dt><dd>true - if the given edge (and weight) were added to this Network
 object by this call; return false, if the given edge (and weight)
 were already in this Network object when this call was made.</dd></dl>
</li>
</ul>
<a name="removeVertex(java.lang.Object)">
<!--   -->
</a><a name="removeVertex(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeVertex</h4>
<pre>public&nbsp;boolean&nbsp;removeVertex(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;vertex)</pre>
<div class="block">Ensures that a specified Vertex object is not an element of this Network
 object. The averageTime (V, E) is O (V + E).</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#removeVertex(T)">removeVertex</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>vertex</code> - - the Vertex object whose absence is ensured.</dd>
<dt><span class="strong">Returns:</span></dt><dd>true - if vertex was removed from this Network object by this
         call; returns false if vertex was not an element of this Network
         object when this call was made.</dd></dl>
</li>
</ul>
<a name="removeEdge(java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="removeEdge(Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeEdge</h4>
<pre>public&nbsp;boolean&nbsp;removeEdge(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v1,
                 <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v2)</pre>
<div class="block">Ensures that an edge specified by two vertices is absent from this
 Network object. The averageTime (V, E) is O (E / V).</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#removeEdge(T, T)">removeEdge</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - - the beginning Vertex object of the edge whose absence is
            ensured.</dd><dd><code>v2</code> - - the ending Vertex object of the edge whose absence is
            ensured.</dd>
<dt><span class="strong">Returns:</span></dt><dd>true - if the edge <v1, v2> was removed from this Network object
         by this call; return false if the edge <v1, v2> was not in this
         Network object when this call was made.</dd></dl>
</li>
</ul>
<a name="vertexSet()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>vertexSet</h4>
<pre>public&nbsp;java.util.Set&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&nbsp;vertexSet()</pre>
<div class="block"><strong>Description copied from interface:&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html#vertexSet()">Graph</a></code></strong></div>
<div class="block">Returns a set view of the vertices in this graph.  The set is
 backed by the graph, so changes to the graph are reflected in the set, and
 vice-versa.  If the map is modified while an iteration over the set is
 in progress</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#vertexSet()">vertexSet</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a set view of the vertices in this graph.</dd></dl>
</li>
</ul>
<a name="getNeighbors(java.lang.Object)">
<!--   -->
</a><a name="getNeighbors(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getNeighbors</h4>
<pre>public&nbsp;java.util.Set&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&nbsp;getNeighbors(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v)</pre>
<div class="block"><strong>Description copied from interface:&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html#getNeighbors(T)">Graph</a></code></strong></div>
<div class="block">Returns the vertices that are adjacent to vertex v in a
 <tt>Set</tt> object.</div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../org/eda1/estructurasdedatos/Graph.html#getNeighbors(T)">getNeighbors</a></code>&nbsp;in interface&nbsp;<code><a href="../../../org/eda1/estructurasdedatos/Graph.html" title="interface in org.eda1.estructurasdedatos">Graph</a>&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>v</code> - vertex in the graph.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the set of vertices that are adjacent to vertex v.</dd></dl>
</li>
</ul>
<a name="toString()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<div class="block">Returns a String representation of this Network object. The
 averageTime(V, E) is O(V + E).</div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a String representation of this Network object.</dd></dl>
</li>
</ul>
<a name="readRoadNetwork(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>readRoadNetwork</h4>
<pre>public static&nbsp;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="class in org.eda1.practica04">RoadNetwork</a>&lt;java.lang.String&gt;&nbsp;readRoadNetwork(java.lang.String&nbsp;filename)
                                                     throws java.io.FileNotFoundException</pre>
<div class="block">Read road network.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>filename</code> - the filename</dd>
<dt><span class="strong">Returns:</span></dt><dd>the road network</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>java.io.FileNotFoundException</code> - the file not found exception</dd></dl>
</li>
</ul>
<a name="iterator()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>iterator</h4>
<pre>public&nbsp;java.util.Iterator&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&nbsp;iterator()</pre>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code>iterator</code>&nbsp;in interface&nbsp;<code>java.lang.Iterable&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;</code></dd>
</dl>
</li>
</ul>
<a name="breadthFirstIterator(java.lang.Object)">
<!--   -->
</a><a name="breadthFirstIterator(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>breadthFirstIterator</h4>
<pre>public&nbsp;org.eda1.practica04.RoadNetwork.BreadthFirstIterator&nbsp;breadthFirstIterator(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v)</pre>
<div class="block">Breadth first itreador.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v</code> - Vertex vertice.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the breadth first iterator.</dd></dl>
</li>
</ul>
<a name="depthFirstIterator(java.lang.Object)">
<!--   -->
</a><a name="depthFirstIterator(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>depthFirstIterator</h4>
<pre>public&nbsp;org.eda1.practica04.RoadNetwork.DepthFirstIterator&nbsp;depthFirstIterator(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;v)</pre>
<div class="block">Depth first iterator.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v</code> - Vertex vertice.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the depth first iterator</dd></dl>
</li>
</ul>
<a name="toArrayDFS(java.lang.Object)">
<!--   -->
</a><a name="toArrayDFS(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toArrayDFS</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&nbsp;toArrayDFS(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;start)</pre>
<div class="block">Pasa a arrays dfs.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - Vertex vertice de comienzo</dd>
<dt><span class="strong">Returns:</span></dt><dd>result ArrayList<Vertex> camino de vertices.</dd></dl>
</li>
</ul>
<a name="toArrayDFSAux(java.lang.Object)">
<!--   -->
</a><a name="toArrayDFSAux(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toArrayDFSAux</h4>
<pre>public&nbsp;void&nbsp;toArrayDFSAux(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;current)</pre>
<div class="block">Pasa a array de String dfs aux.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>current</code> - vertice puntero.</dd></dl>
</li>
</ul>
<a name="toArrayBFS(java.lang.Object)">
<!--   -->
</a><a name="toArrayBFS(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toArrayBFS</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&nbsp;toArrayBFS(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;start)</pre>
<div class="block">Pasa array el bfs.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - Vertex vertice de entrada</dd>
<dt><span class="strong">Returns:</span></dt><dd>the ArrayList<Vertex> camino</dd></dl>
</li>
</ul>
<a name="Dijkstra(java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="Dijkstra(Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Dijkstra</h4>
<pre>public&nbsp;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&nbsp;Dijkstra(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;origen,
                                                                       <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destino)</pre>
<div class="block">Algoritmo Dijkstra.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>origen</code> - Vertex origen</dd><dd><code>destino</code> - Vertex destino</dd>
<dt><span class="strong">Returns:</span></dt><dd>resultado ArrayList<EdgeWeiht></dd></dl>
</li>
</ul>
<a name="shortestPathSTD(java.lang.Object,java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="shortestPathSTD(Vertex, Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>shortestPathSTD</h4>
<pre>public&nbsp;java.lang.String&nbsp;shortestPathSTD(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;origen,
                               <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;pasando,
                               <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destino)</pre>
<div class="block">Metodo Shortest path std.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>origen</code> - the origen</dd><dd><code>pasando</code> - the pasando</dd><dd><code>destino</code> - the destino</dd>
<dt><span class="strong">Returns:</span></dt><dd>the string</dd></dl>
</li>
</ul>
<a name="DijkstraTree(java.lang.Object)">
<!--   -->
</a><a name="DijkstraTree(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>DijkstraTree</h4>
<pre>public&nbsp;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&nbsp;DijkstraTree(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source)</pre>
<div class="block">Metodo Dijkstra con arbol.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>source</code> - Vertex vertice</dd>
<dt><span class="strong">Returns:</span></dt><dd>resultado ArrayList</dd></dl>
</li>
</ul>
<a name="DijkstraFarthest(java.lang.Object)">
<!--   -->
</a><a name="DijkstraFarthest(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>DijkstraFarthest</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;&nbsp;DijkstraFarthest(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source)</pre>
<div class="block">Dijkstra farthest.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>source</code> - the source</dd>
<dt><span class="strong">Returns:</span></dt><dd>the array list</dd></dl>
</li>
</ul>
<a name="simplePaths(java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="simplePaths(Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>simplePaths</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.util.ArrayList&lt;<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&gt;&gt;&nbsp;simplePaths(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source,
                                                           <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destination)</pre>
<div class="block">Simple paths.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>source</code> - Vertex</dd><dd><code>destination</code> - Vertex destino</dd>
<dt><span class="strong">Returns:</span></dt><dd>the array list</dd></dl>
</li>
</ul>
<a name="largestPathWithSimplePaths(java.lang.Object,java.lang.Object)">
<!--   -->
</a><a name="largestPathWithSimplePaths(Vertex, Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>largestPathWithSimplePaths</h4>
<pre>public&nbsp;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&nbsp;largestPathWithSimplePaths(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source,
                                                                                         <a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;destination)</pre>
<div class="block">Devuelve en camino con mayor longitud.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>source</code> - Vertex</dd><dd><code>destination</code> - vertex</dd>
<dt><span class="strong">Returns:</span></dt><dd>resultado ArrayList<EdgeWeight> camino con pesos.</dd></dl>
</li>
</ul>
<a name="Floyd()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Floyd</h4>
<pre>public&nbsp;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&nbsp;Floyd()</pre>
<div class="block">Algoritmo Floyd</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ArrayList</dd></dl>
</li>
</ul>
<a name="FloydFilterByDistances(double, double)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>FloydFilterByDistances</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;&nbsp;FloydFilterByDistances(double&nbsp;d1,
                                                                                                          double&nbsp;d2)</pre>
<div class="block">Clase Floyd filter by distances.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>d1</code> - the d1</dd><dd><code>d2</code> - the d2</dd>
<dt><span class="strong">Returns:</span></dt><dd>the array list</dd></dl>
</li>
</ul>
<a name="FloydClosestFarthest()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>FloydClosestFarthest</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;&nbsp;FloydClosestFarthest()</pre>
<div class="block">Clase Floyd closest farthest.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>the array list</dd></dl>
</li>
</ul>
<a name="FloydFilterByNameOfCity(java.lang.Object)">
<!--   -->
</a><a name="FloydFilterByNameOfCity(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>FloydFilterByNameOfCity</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&gt;&nbsp;FloydFilterByNameOfCity(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;origen)</pre>
<div class="block">Floy filtardo con un nombre de ciudad.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>origen</code> - Vertex cuidad de origen</dd>
<dt><span class="strong">Returns:</span></dt><dd>FloydFilterByNameOfCity salida.</dd></dl>
</li>
</ul>
<a name="FloydWithDijkstra()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>FloydWithDijkstra</h4>
<pre>public&nbsp;int&nbsp;FloydWithDijkstra()</pre>
<div class="block">Metodo</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>the int</dd></dl>
</li>
</ul>
<a name="Prim(java.lang.Object)">
<!--   -->
</a><a name="Prim(Vertex)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Prim</h4>
<pre>public&nbsp;java.util.ArrayList&lt;org.eda1.practica04.RoadNetwork.EdgeWeight&gt;&nbsp;Prim(<a href="../../../org/eda1/practica04/RoadNetwork.html" title="type parameter in RoadNetwork">Vertex</a>&nbsp;source)</pre>
<div class="block">Metodo Prim.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>source</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>arrayList</dd></dl>
</li>
</ul>
<a name="isFloydGraph()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isFloydGraph</h4>
<pre>public&nbsp;boolean&nbsp;isFloydGraph()</pre>
<div class="block">Comprueba si es un grafo de Floid.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean true si es de floid</dd></dl>
</li>
</ul>
<a name="adaptToFloydGraph()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>adaptToFloydGraph</h4>
<pre>public&nbsp;void&nbsp;adaptToFloydGraph()</pre>
<div class="block">Transforma un grafo cualquiera en grafo de Floyd.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/RoadNetwork.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../../../org/eda1/practica04/RoadNetworkTestJUnit4.html" title="class in org.eda1.practica04"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?org/eda1/practica04/RoadNetwork.html" target="_top">Frames</a></li>
<li><a href="RoadNetwork.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
