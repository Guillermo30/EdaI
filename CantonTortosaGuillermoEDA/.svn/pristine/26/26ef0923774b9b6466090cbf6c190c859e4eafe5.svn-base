package org.eda1.practica02.ejercicio02;

import org.eda1.estructurasdedatos.*;

public class EmpresaProyectos implements Comparable<Object>{
	private String empresa;
	private AVLTree<ProyectoCiudades> proyectosCiudades;
	/**
	 * Constructor de la clase EmpresaProyectos
	 * inicializa todos los atributos vacios
	 */
	public EmpresaProyectos(){
		empresa = "";
		proyectosCiudades = new AVLTree<ProyectoCiudades>();
	}
	public EmpresaProyectos(String empr, String proy, String ciudad){
		this.empresa = empr;
		this.proyectosCiudades = new AVLTree<ProyectoCiudades>();
		this.proyectosCiudades.add(new ProyectoCiudades(proy, ciudad));
	}
	/**
	 * Constructor de la clase EmpresaProyectos
	 * @param empr String con el nombre de la empresa
	 */
	public EmpresaProyectos(String empr){
		empresa = empr;
		proyectosCiudades = new AVLTree<ProyectoCiudades>();
	}
	/**
	 * Metodo que agrega un nuevo proyectoCiudad
	 * @param proyecto String con el nombre del proyecto
	 * @param ciudad String con el nombre de la ciudad
	 */
	public boolean addProyectoCiudad(String proyecto, String ciudad){
		Iterator<ProyectoCiudades> itePro = this.proyectosCiudades.iterator();
		while(itePro.hasNext()){
			ProyectoCiudades aux = itePro.next();
			if(aux.getProyecto().equals(proyecto))return aux.addCiudad(ciudad);
		}
		return this.proyectosCiudades.add(new ProyectoCiudades(proyecto, ciudad));
	}
	
	public boolean addProyectoCiudadWithFind(String proyecto, String ciudad){
		ProyectoCiudades aux = this.proyectosCiudades.find(new ProyectoCiudades(proyecto));
		if(aux==null){
			return this.proyectosCiudades.add(new ProyectoCiudades(proyecto, ciudad));
		}else{
			return aux.addCiudad(ciudad);
		}
	}
	/**
	 * Permite modificar el nombre de la empresa
	 * @param empr String con el nuevo nombre de la empresa
	 */
	public void setEmpresa(String empr){
		this.empresa = empr;
	}
	/**
	 * Permite consultar el nombre de la empresa
	 * @return String con el nombre de la empresa
	 */
	public String getEmpresa(){
		return this.empresa;
	}
	/**
	 * Permite consultar la lista de proyectos asociados a una empresa
	 * @return ArrayList<ProyectoCiudades> con la lista de proyectos
	 */
	public AVLTree<ProyectoCiudades> getProyectosCiudades(){
		return this.proyectosCiudades;
	}
	/**
	 * Permite consultar un proyecto determinado
	 * @param i int con la posición en el array del proyecto a consultar
	 * @return ProyectoCiudades que se desea consultar
	 */
	public ProyectoCiudades getProyectoCiudades(int i){
		ProyectoCiudades[] aux = (ProyectoCiudades[])this.proyectosCiudades.toArray();
		return aux[i];
	}
	/**
	 * Metodo que devuelve el numero de proyectos
	 * @return int con el tamaño de la lista
	 */
	public int size(){
		return this.proyectosCiudades.size();
	}
	@Override
	public int compareTo(Object o) {
		EmpresaProyectos aux = (EmpresaProyectos) o;
		return this.empresa.compareTo(aux.empresa);
	}
	public String toString(){
		String cadena=this.empresa+": ";
		Iterator<ProyectoCiudades> ite = this.proyectosCiudades.iterator();
		while(ite.hasNext()){
			cadena += ite.next().toString();
			if(ite.hasNext())cadena += "; ";
		}
		return cadena;
	}
}
