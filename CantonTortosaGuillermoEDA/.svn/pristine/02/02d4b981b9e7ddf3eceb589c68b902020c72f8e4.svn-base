<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="es">
<head>
<!-- Generated by javadoc (version 1.7.0) on Sun Dec 29 19:43:02 CET 2013 -->
<title>Heap</title>
<meta name="date" content="2013-12-29">
<link rel="stylesheet" type="text/css" href="../../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Heap";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Heap.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/HeapExamenParcialGrupoATestJUnit4.html" title="class in org.eda1.examenParcialGrupoA.ejercicio01"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../index.html?org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" target="_top">Frames</a></li>
<li><a href="Heap.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">org.eda1.examenParcialGrupoA.ejercicio01</div>
<h2 title="Class Heap" class="title">Class Heap&lt;T&gt;</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>org.eda1.examenParcialGrupoA.ejercicio01.Heap&lt;T&gt;</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="strong">Heap&lt;T&gt;</span>
extends java.lang.Object</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#Heap()">Heap</a></strong>()</code>
<div class="block">Inicializa el Heap con una capacidad inicial por defecto
 DEFAULT_INITIAL_CAPACITY y con elementos en una clase que implemente la
 interfaz Comparable</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#Heap(java.util.Comparator)">Heap</a></strong>(java.util.Comparator&lt;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&gt;&nbsp;comp)</code>
<div class="block">Inicializa el Heap a una capacidad inicial de initialCapacity, y con
 elementos comparados según el objeto Comparator comp.</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#Heap(org.eda1.examenParcialGrupoA.ejercicio01.Heap)">Heap</a></strong>(<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="class in org.eda1.examenParcialGrupoA.ejercicio01">Heap</a>&lt;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&gt;&nbsp;otherHeap)</code>
<div class="block">Inicializa este Heap con un objeto Heap pasado por parámetro Los
 elementos en este Heap se compararán como se especifiquen en el objeto
 Heap que se pasa como parámetro The worstTime(n) is O(n), donde n es el
 número de elementos en el Heap pasado como parámetro.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#Heap(int)">Heap</a></strong>(int&nbsp;initialCapacity)</code>
<div class="block">Inicializa el Heap a una capacidad inicial de initialCapacity, y con
 elementos en una clase que implementa la interface Comparable</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#Heap(int, java.util.Comparator)">Heap</a></strong>(int&nbsp;initialCapacity,
    java.util.Comparator&lt;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&gt;&nbsp;comp)</code>
<div class="block">Inicializa el Heap a una capacidad inicial de initialCapacity, y con
 elementos que están ordenados por un objeto Comparator dado.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#add(T)">add</a></strong>(<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;element)</code>
<div class="block">Inserta un elemento en el Heap.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#assign(int, T)">assign</a></strong>(int&nbsp;i,
      <a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;integer)</code>
<div class="block">Sustituye o asigna en la posición de array indicada un elemento.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#branchMinSum()">branchMinSum</a></strong>()</code>
<div class="block">Método que suma los elementos de cada rama y devuelve la rama con menor valor en sus 
 elementos desde la hoja hasta la raíz.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#decreaseKey(int, java.lang.Integer)">decreaseKey</a></strong>(int&nbsp;i,
           java.lang.Integer&nbsp;x)</code>
<div class="block">Decrementa el valor de una posición del heap.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#delete(int)">delete</a></strong>(int&nbsp;i)</code>
<div class="block">Método que elimina una posición de heap.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a></code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#getMin()">getMin</a></strong>()</code>
<div class="block">Devuelve el elemento con el menor valor del Heap.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a></code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#getValue(int)">getValue</a></strong>(int&nbsp;i)</code>
<div class="block">Devuelve el valor del indice indicado.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#increaseKey(int, java.lang.Integer)">increaseKey</a></strong>(int&nbsp;i,
           java.lang.Integer&nbsp;x)</code>
<div class="block">Método que incrementa el valor existente en una posición del array/heap.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#isEmpty()">isEmpty</a></strong>()</code>
<div class="block">Determina si el Heap no tiene elementos (está vacio).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#isHeap()">isHeap</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#makeHeap()">makeHeap</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a></code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#removeMin()">removeMin</a></strong>()</code>
<div class="block">Elimina el elemento con el menor valor del Heap.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#replaceKey(int, T)">replaceKey</a></strong>(int&nbsp;i,
          <a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;x)</code>
<div class="block">Método que remplaza el valor de una posición en el heap.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#size()">size</a></strong>()</code>
<div class="block">Devuelve el número de elementos en el Heap</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#sumValuesOfBranches()">sumValuesOfBranches</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html#toString()">toString</a></strong>()</code>
<div class="block">Método toString que muestra por pantalla el contenido del heap.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Heap(int, java.util.Comparator)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Heap</h4>
<pre>public&nbsp;Heap(int&nbsp;initialCapacity,
    java.util.Comparator&lt;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&gt;&nbsp;comp)</pre>
<div class="block">Inicializa el Heap a una capacidad inicial de initialCapacity, y con
 elementos que están ordenados por un objeto Comparator dado.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>initialCapacity</code> - - Capacidad inicial para el Heap.</dd><dd><code>comp</code> - - el objeto Comparator.</dd></dl>
</li>
</ul>
<a name="Heap()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Heap</h4>
<pre>public&nbsp;Heap()</pre>
<div class="block">Inicializa el Heap con una capacidad inicial por defecto
 DEFAULT_INITIAL_CAPACITY y con elementos en una clase que implemente la
 interfaz Comparable</div>
</li>
</ul>
<a name="Heap(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Heap</h4>
<pre>public&nbsp;Heap(int&nbsp;initialCapacity)</pre>
<div class="block">Inicializa el Heap a una capacidad inicial de initialCapacity, y con
 elementos en una clase que implementa la interface Comparable</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>initialCapacity</code> - - la capacidad inicial del Heap.</dd></dl>
</li>
</ul>
<a name="Heap(java.util.Comparator)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Heap</h4>
<pre>public&nbsp;Heap(java.util.Comparator&lt;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&gt;&nbsp;comp)</pre>
<div class="block">Inicializa el Heap a una capacidad inicial de initialCapacity, y con
 elementos comparados según el objeto Comparator comp.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>comp</code> - - el objeto Comparator utilizado para comparar elementos en el
            Heap</dd></dl>
</li>
</ul>
<a name="Heap(org.eda1.examenParcialGrupoA.ejercicio01.Heap)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Heap</h4>
<pre>public&nbsp;Heap(<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="class in org.eda1.examenParcialGrupoA.ejercicio01">Heap</a>&lt;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&gt;&nbsp;otherHeap)</pre>
<div class="block">Inicializa este Heap con un objeto Heap pasado por parámetro Los
 elementos en este Heap se compararán como se especifiquen en el objeto
 Heap que se pasa como parámetro The worstTime(n) is O(n), donde n es el
 número de elementos en el Heap pasado como parámetro.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>otherHeap</code> - - el Heap que se va a copiar en en objeto heap actual</dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="size()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>size</h4>
<pre>public&nbsp;int&nbsp;size()</pre>
<div class="block">Devuelve el número de elementos en el Heap</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>número de elementos que hay en este Heap.</dd></dl>
</li>
</ul>
<a name="isEmpty()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isEmpty</h4>
<pre>public&nbsp;boolean&nbsp;isEmpty()</pre>
<div class="block">Determina si el Heap no tiene elementos (está vacio).</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>true - si el heap no tiene elementos, en otro caso false;</dd></dl>
</li>
</ul>
<a name="add(java.lang.Object)">
<!--   -->
</a><a name="add(T)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>add</h4>
<pre>public&nbsp;void&nbsp;add(<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;element)</pre>
<div class="block">Inserta un elemento en el Heap. The worstTime(n) is O(n) and
 averageTime(n) is constant.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>element</code> - - el elemento que va a ser insertado en el Heap</dd></dl>
</li>
</ul>
<a name="getMin()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getMin</h4>
<pre>public&nbsp;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;getMin()</pre>
<div class="block">Devuelve el elemento con el menor valor del Heap.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>el elemento con el menor valor del Heap.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>java.util.NoSuchElementException</code> - - si el Heap está vacío.</dd></dl>
</li>
</ul>
<a name="removeMin()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeMin</h4>
<pre>public&nbsp;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;removeMin()</pre>
<div class="block">Elimina el elemento con el menor valor del Heap. The worstTime(n) is
 O(log n).</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>el elemento eliminado.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>java.util.NoSuchElementException</code> - - si el Heap está vacío.</dd></dl>
</li>
</ul>
<a name="getValue(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getValue</h4>
<pre>public&nbsp;<a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;getValue(int&nbsp;i)</pre>
<div class="block">Devuelve el valor del indice indicado.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - Indice/posición en el array</dd>
<dt><span class="strong">Returns:</span></dt><dd>Elemento de esa indice o posición.</dd></dl>
</li>
</ul>
<a name="assign(int,java.lang.Object)">
<!--   -->
</a><a name="assign(int, T)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>assign</h4>
<pre>public&nbsp;void&nbsp;assign(int&nbsp;i,
          <a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;integer)</pre>
<div class="block">Sustituye o asigna en la posición de array indicada un elemento.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - Posición a sustituir o asignar.</dd><dd><code>integer</code> - Elemento que se ingresará en la posición.</dd></dl>
</li>
</ul>
<a name="isHeap()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isHeap</h4>
<pre>public&nbsp;boolean&nbsp;isHeap()</pre>
</li>
</ul>
<a name="toString()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<div class="block">Método toString que muestra por pantalla el contenido del heap.</div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a name="makeHeap()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeHeap</h4>
<pre>public&nbsp;void&nbsp;makeHeap()</pre>
</li>
</ul>
<a name="increaseKey(int, java.lang.Integer)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>increaseKey</h4>
<pre>public&nbsp;boolean&nbsp;increaseKey(int&nbsp;i,
                  java.lang.Integer&nbsp;x)</pre>
<div class="block">Método que incrementa el valor existente en una posición del array/heap.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - Posición a incrementar el valor.</dd><dd><code>x</code> - Valor a incrementar.</dd>
<dt><span class="strong">Returns:</span></dt><dd>True si se ha realizado correctamente el increso del valor.</dd></dl>
</li>
</ul>
<a name="decreaseKey(int, java.lang.Integer)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>decreaseKey</h4>
<pre>public&nbsp;boolean&nbsp;decreaseKey(int&nbsp;i,
                  java.lang.Integer&nbsp;x)</pre>
<div class="block">Decrementa el valor de una posición del heap.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - Posición a decrementar.</dd><dd><code>x</code> - Valor que vamos a decrementar.</dd>
<dt><span class="strong">Returns:</span></dt><dd>True en caso de que haya realizado correctamente el decremento.</dd></dl>
</li>
</ul>
<a name="replaceKey(int,java.lang.Object)">
<!--   -->
</a><a name="replaceKey(int, T)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>replaceKey</h4>
<pre>public&nbsp;boolean&nbsp;replaceKey(int&nbsp;i,
                 <a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" title="type parameter in Heap">T</a>&nbsp;x)</pre>
<div class="block">Método que remplaza el valor de una posición en el heap.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - Posición a remplazar su valor.</dd><dd><code>x</code> - Valor a remplazar.</dd>
<dt><span class="strong">Returns:</span></dt><dd>True en caso de que haya ralizado correctamente el remplazo.</dd></dl>
</li>
</ul>
<a name="delete(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>delete</h4>
<pre>public&nbsp;boolean&nbsp;delete(int&nbsp;i)</pre>
<div class="block">Método que elimina una posición de heap.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - Posición a eliminar.</dd>
<dt><span class="strong">Returns:</span></dt><dd>True en caso que se haya podido eliminar.</dd></dl>
</li>
</ul>
<a name="branchMinSum()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>branchMinSum</h4>
<pre>public&nbsp;java.lang.String&nbsp;branchMinSum()</pre>
<div class="block">Método que suma los elementos de cada rama y devuelve la rama con menor valor en sus 
 elementos desde la hoja hasta la raíz.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>Rama con el valor mínimo de elementos</dd></dl>
</li>
</ul>
<a name="sumValuesOfBranches()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>sumValuesOfBranches</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.lang.Integer&gt;&nbsp;sumValuesOfBranches()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Heap.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../../../../org/eda1/examenParcialGrupoA/ejercicio01/HeapExamenParcialGrupoATestJUnit4.html" title="class in org.eda1.examenParcialGrupoA.ejercicio01"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../index.html?org/eda1/examenParcialGrupoA/ejercicio01/Heap.html" target="_top">Frames</a></li>
<li><a href="Heap.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
